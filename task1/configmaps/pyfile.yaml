apiVersion: v1
data:
  pyfile: "import multiprocessing\n\ndef handler(input: dict, context: object) ->
    dict:    \n    # porcentagem de uso de memória\n    mem_cashed = input['virtual_memory-cached']\n
    \   mem_buffer = input['virtual_memory-buffers']\n    mem_total = input['virtual_memory-total']\n
    \   mem_percent = ((mem_cashed + mem_buffer)) * 100 / mem_total\n\n    # porcentagem
    de trafego de rede\n    bytes_sent = input['net_io_counters_eth0-packets_sent']\n
    \   bytes_recv = input['net_io_counters_eth0-packets_recv']\n    if bytes_sent
    + bytes_recv > 0:\n        net_percent = (bytes_sent * 100) / (bytes_sent + bytes_recv)\n
    \   else:\n        net_percent = 0\n            \n    # quantidade de CPUs\n    cpus
    = multiprocessing.cpu_count()\n    # porcentagem de uso de cada CPU\n    cpu_percent
    = {}\n    for i in range(cpus):\n        percent = input[f'cpu_percent-{i}']\n
    \       cpu_percent[i] = percent\n    # média móvel de utilização de cada CPU
    no ultimo minuto\n    moving_average = {}\n    for i in range(cpus):\n        use
    = context.env.get(f'cpu-{i}', [])\n        use.append(cpu_percent[i])\n        if
    len(use) > 60:\n            use.pop(0)\n        moving_average[i] = sum(use) /
    len(use)\n        context.env[f'cpu-{i}'] = use\n    \n    # retorna o dicionário
    com os dados\n    return_dict = {\n        'percent-memory-use': mem_percent,\n
    \       'percent-network-egress': net_percent,\n    }\n    for i in range(cpus):\n
    \       return_dict[f'moving-average-{i}'] = moving_average[i]\n    return return_dict"
kind: ConfigMap
metadata:
  creationTimestamp: "2023-12-13T18:40:14Z"
  name: pyfile
  namespace: leonardomaia
  resourceVersion: "4519693"
  uid: 55841f57-8ca4-49c6-815b-92e03f79ebd8
